/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package org.snlab;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static org.snlab.psi.YangTypes.*;
/*import static org.snlab.psi.YangTokenTypeSets.*;*/


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>Yang.flex</tt>
 */
public class YangLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int VALUE_MODE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\177\200");

  /* The ZZ_CMAP_A table has 256 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\3\1\2\1\0\1\3\1\1\22\0\1\7\1\0\1\10\7\0\1\5\1\14\1\0\1\35\1\11\1\4"+
    "\12\11\1\12\1\13\5\0\32\11\1\0\1\6\2\0\1\44\1\0\1\17\1\32\1\37\1\42\1\30\1"+
    "\41\1\26\1\40\1\36\1\11\1\46\1\24\1\23\1\20\1\34\1\43\1\50\1\25\1\33\1\31"+
    "\1\27\1\45\1\51\1\22\1\21\1\47\1\15\1\0\1\16\202\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\2\3\1\4\1\5\1\6\1\7"+
    "\25\3\1\10\1\1\1\10\1\11\1\12\2\0\56\3"+
    "\2\0\1\10\2\2\2\0\23\3\1\13\11\3\1\14"+
    "\26\3\1\15\1\3\1\0\1\2\11\3\1\16\2\3"+
    "\1\17\1\3\1\20\10\3\1\21\1\22\2\3\1\23"+
    "\1\24\13\3\1\25\11\3\1\26\4\3\1\27\15\3"+
    "\1\30\5\3\1\31\13\3\1\32\17\3\1\33\1\34"+
    "\10\3\1\35\2\3\1\36\1\3\1\37\3\3\1\40"+
    "\5\3\1\41\2\3\1\42\1\3\1\43\4\3\1\44"+
    "\1\45\7\3\1\46\2\3\1\47\17\3\1\50\4\3"+
    "\1\51\3\3\1\52\1\3\1\53\1\3\1\54\1\55"+
    "\1\3\1\56\2\3\1\57\11\3\1\60\1\3\1\61"+
    "\10\3\1\62\4\3\1\63\1\64\1\65\3\3\1\66"+
    "\2\3\1\67\1\70\2\3\1\71\3\3\1\72\3\3"+
    "\1\73\2\3\1\74\11\3\1\75\1\3\1\76\1\77"+
    "\4\3\1\100\10\3\1\101\1\102\1\103\1\104\1\105"+
    "\4\3\1\106\1\3\1\107\1\3\1\110\1\111\4\3"+
    "\1\112\1\113";

  private static int [] zzUnpackAction() {
    int [] result = new int[430];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\52\0\124\0\176\0\250\0\322\0\124\0\124"+
    "\0\124\0\124\0\374\0\u0126\0\u0150\0\u017a\0\u01a4\0\u01ce"+
    "\0\u01f8\0\u0222\0\u024c\0\u0276\0\u02a0\0\u02ca\0\u02f4\0\u031e"+
    "\0\u0348\0\u0372\0\u039c\0\u03c6\0\u03f0\0\u041a\0\u0444\0\u046e"+
    "\0\u0498\0\u04c2\0\124\0\124\0\u04ec\0\u0516\0\u0540\0\u056a"+
    "\0\u0594\0\u05be\0\u05e8\0\u0612\0\u063c\0\u0666\0\u0690\0\u06ba"+
    "\0\u06e4\0\u070e\0\u0738\0\u0762\0\u078c\0\u07b6\0\u07e0\0\u080a"+
    "\0\u0834\0\u085e\0\u0888\0\u08b2\0\u08dc\0\u0906\0\u0930\0\u095a"+
    "\0\u0984\0\u09ae\0\u09d8\0\u0a02\0\u0a2c\0\u0a56\0\u0a80\0\u0aaa"+
    "\0\u0ad4\0\u0afe\0\u0b28\0\u0b52\0\u0b7c\0\u0ba6\0\u0bd0\0\u0bfa"+
    "\0\u0c24\0\u0c4e\0\u0c78\0\u0ca2\0\u0498\0\u0ccc\0\124\0\u0cf6"+
    "\0\124\0\u0d20\0\u0d4a\0\u0d74\0\u0d9e\0\u0dc8\0\u0df2\0\u0e1c"+
    "\0\u0e46\0\u0e70\0\u0e9a\0\u0ec4\0\u0eee\0\u0f18\0\u0f42\0\u0f6c"+
    "\0\u0f96\0\u0fc0\0\u0fea\0\u1014\0\u103e\0\u1068\0\322\0\u1092"+
    "\0\u10bc\0\u10e6\0\u1110\0\u113a\0\u1164\0\u118e\0\u11b8\0\u11e2"+
    "\0\322\0\u120c\0\u1236\0\u1260\0\u128a\0\u12b4\0\u12de\0\u1308"+
    "\0\u1332\0\u135c\0\u1386\0\u13b0\0\u13da\0\u1404\0\u142e\0\u1458"+
    "\0\u1482\0\u14ac\0\u14d6\0\u1500\0\u152a\0\u1554\0\u157e\0\322"+
    "\0\u15a8\0\u15d2\0\u0d20\0\u15fc\0\u1626\0\u1650\0\u167a\0\u16a4"+
    "\0\u16ce\0\u16f8\0\u1722\0\u174c\0\322\0\u1776\0\u17a0\0\u17ca"+
    "\0\u17f4\0\322\0\u181e\0\u1848\0\u1872\0\u189c\0\u18c6\0\u18f0"+
    "\0\u191a\0\u1944\0\322\0\322\0\u196e\0\u1998\0\u19c2\0\322"+
    "\0\u19ec\0\u1a16\0\u1a40\0\u1a6a\0\u1a94\0\u1abe\0\u1ae8\0\u1b12"+
    "\0\u1b3c\0\u1b66\0\u1b90\0\322\0\u1bba\0\u1be4\0\u1c0e\0\u1c38"+
    "\0\u1c62\0\u1c8c\0\u1cb6\0\u1ce0\0\u1d0a\0\322\0\u1d34\0\u1d5e"+
    "\0\u1d88\0\u1db2\0\322\0\u1ddc\0\u1e06\0\u1e30\0\u1e5a\0\u1e84"+
    "\0\u1eae\0\u1ed8\0\u1f02\0\u1f2c\0\u1f56\0\u1f80\0\u1faa\0\u1fd4"+
    "\0\322\0\u1ffe\0\u2028\0\u2052\0\u207c\0\u20a6\0\322\0\u20d0"+
    "\0\u20fa\0\u2124\0\u214e\0\u2178\0\u21a2\0\u21cc\0\u21f6\0\u2220"+
    "\0\u224a\0\u2274\0\322\0\u229e\0\u22c8\0\u22f2\0\u231c\0\u2346"+
    "\0\u2370\0\u239a\0\u23c4\0\u23ee\0\u2418\0\u2442\0\u246c\0\u2496"+
    "\0\u24c0\0\u24ea\0\322\0\322\0\u2514\0\u253e\0\u2568\0\u2592"+
    "\0\u25bc\0\u25e6\0\u2610\0\u263a\0\322\0\u2664\0\u268e\0\322"+
    "\0\u26b8\0\322\0\u26e2\0\u270c\0\u2736\0\322\0\u2760\0\u278a"+
    "\0\u27b4\0\u27de\0\u2808\0\322\0\u2832\0\u285c\0\322\0\u2886"+
    "\0\322\0\u28b0\0\u28da\0\u2904\0\u292e\0\322\0\322\0\u2958"+
    "\0\u2982\0\u29ac\0\u29d6\0\u2a00\0\u2a2a\0\u2a54\0\322\0\u2a7e"+
    "\0\u2aa8\0\322\0\u2ad2\0\u2afc\0\u2b26\0\u2b50\0\u2b7a\0\u2ba4"+
    "\0\u2bce\0\u2bf8\0\u2c22\0\u2c4c\0\u2c76\0\u2ca0\0\u2cca\0\u2cf4"+
    "\0\u2d1e\0\322\0\u2d48\0\u2d72\0\u2d9c\0\u2dc6\0\322\0\u2df0"+
    "\0\u2e1a\0\u2e44\0\322\0\u2e6e\0\322\0\u2e98\0\322\0\322"+
    "\0\u2ec2\0\322\0\u2eec\0\u2f16\0\322\0\u2f40\0\u2f6a\0\u2f94"+
    "\0\u2fbe\0\u2fe8\0\u3012\0\u303c\0\u3066\0\u3090\0\u30ba\0\u30e4"+
    "\0\322\0\u310e\0\u3138\0\u3162\0\u318c\0\u31b6\0\u31e0\0\u320a"+
    "\0\u3234\0\322\0\u325e\0\u3288\0\u32b2\0\u32dc\0\322\0\322"+
    "\0\322\0\u3306\0\u3330\0\u335a\0\322\0\u3384\0\u33ae\0\322"+
    "\0\322\0\u33d8\0\u3402\0\322\0\u342c\0\u3456\0\u3480\0\322"+
    "\0\u34aa\0\u34d4\0\u34fe\0\322\0\u3528\0\u3552\0\322\0\u357c"+
    "\0\u35a6\0\u35d0\0\u35fa\0\u3624\0\u364e\0\u3678\0\u36a2\0\u36cc"+
    "\0\322\0\u36f6\0\322\0\322\0\u3720\0\u374a\0\u3774\0\u379e"+
    "\0\322\0\u37c8\0\u37f2\0\u381c\0\u3846\0\u3870\0\u389a\0\u38c4"+
    "\0\u38ee\0\322\0\322\0\322\0\322\0\322\0\u3918\0\u3942"+
    "\0\u396c\0\u3996\0\322\0\u39c0\0\322\0\u39ea\0\322\0\322"+
    "\0\u3a14\0\u3a3e\0\u3a68\0\u3a92\0\322\0\322";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[430];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\3\4\1\5\2\3\1\4\1\3\1\6\1\3"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\6"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\6\1\30\1\31\1\6\1\32\1\33"+
    "\1\34\1\6\1\35\1\36\2\6\1\37\1\3\3\4"+
    "\1\40\2\3\1\4\1\41\1\42\1\3\1\43\1\3"+
    "\1\44\1\3\33\42\53\0\3\4\3\0\1\4\46\0"+
    "\1\45\1\46\3\0\2\6\4\0\33\6\11\0\2\6"+
    "\4\0\33\6\11\0\2\6\4\0\1\6\1\47\4\6"+
    "\1\50\1\6\1\51\22\6\11\0\2\6\4\0\1\52"+
    "\14\6\1\53\15\6\11\0\2\6\4\0\1\54\16\6"+
    "\1\55\13\6\11\0\2\6\4\0\1\56\7\6\1\57"+
    "\4\6\1\60\1\6\1\61\13\6\11\0\2\6\4\0"+
    "\11\6\1\62\5\6\1\63\13\6\11\0\2\6\4\0"+
    "\1\64\10\6\1\65\12\6\1\66\6\6\11\0\2\6"+
    "\4\0\6\6\1\67\24\6\11\0\2\6\4\0\1\6"+
    "\1\70\12\6\1\71\16\6\11\0\2\6\4\0\1\6"+
    "\1\72\1\6\1\73\2\6\1\74\24\6\11\0\2\6"+
    "\4\0\2\6\1\75\30\6\11\0\2\6\4\0\1\76"+
    "\10\6\1\77\5\6\1\100\13\6\11\0\2\6\4\0"+
    "\10\6\1\101\1\6\1\102\20\6\11\0\2\6\4\0"+
    "\6\6\1\103\1\6\1\104\22\6\11\0\2\6\4\0"+
    "\1\6\1\105\2\6\1\106\15\6\1\107\1\110\7\6"+
    "\11\0\2\6\4\0\1\111\14\6\1\112\3\6\1\113"+
    "\11\6\11\0\2\6\4\0\6\6\1\114\2\6\1\115"+
    "\21\6\11\0\2\6\4\0\11\6\1\116\21\6\11\0"+
    "\2\6\4\0\1\117\5\6\1\120\6\6\1\121\15\6"+
    "\11\0\2\6\4\0\1\122\32\6\11\0\2\6\4\0"+
    "\11\6\1\123\21\6\11\0\2\6\4\0\21\6\1\124"+
    "\11\6\4\0\1\45\1\46\3\0\2\42\4\0\33\42"+
    "\6\125\1\126\1\125\1\127\41\125\11\0\2\42\4\0"+
    "\33\42\1\45\1\130\1\131\47\45\5\132\1\133\44\132"+
    "\11\0\2\6\4\0\2\6\1\134\30\6\11\0\2\6"+
    "\4\0\7\6\1\135\23\6\11\0\2\6\4\0\7\6"+
    "\1\136\23\6\11\0\2\6\4\0\4\6\1\137\26\6"+
    "\11\0\2\6\4\0\12\6\1\140\20\6\11\0\2\6"+
    "\4\0\1\6\1\141\31\6\11\0\2\6\4\0\1\6"+
    "\1\142\31\6\11\0\2\6\4\0\1\6\1\143\1\6"+
    "\1\144\27\6\11\0\2\6\4\0\14\6\1\145\16\6"+
    "\11\0\2\6\4\0\23\6\1\146\7\6\11\0\2\6"+
    "\4\0\1\6\1\147\31\6\11\0\2\6\4\0\1\150"+
    "\1\151\31\6\11\0\2\6\4\0\14\6\1\152\16\6"+
    "\11\0\2\6\4\0\1\6\1\153\31\6\11\0\2\6"+
    "\4\0\22\6\1\154\3\6\1\155\2\6\1\156\1\6"+
    "\11\0\2\6\4\0\20\6\1\157\12\6\11\0\2\6"+
    "\4\0\15\6\1\160\15\6\11\0\2\6\4\0\17\6"+
    "\1\161\13\6\11\0\2\6\4\0\11\6\1\162\21\6"+
    "\11\0\2\6\4\0\10\6\1\163\22\6\11\0\2\6"+
    "\4\0\12\6\1\164\20\6\11\0\2\6\4\0\6\6"+
    "\1\165\24\6\11\0\2\6\4\0\24\6\1\166\6\6"+
    "\11\0\2\6\4\0\14\6\1\167\16\6\11\0\2\6"+
    "\4\0\5\6\1\170\25\6\11\0\2\6\4\0\12\6"+
    "\1\171\20\6\11\0\2\6\4\0\13\6\1\172\17\6"+
    "\11\0\2\6\4\0\1\173\32\6\11\0\2\6\4\0"+
    "\7\6\1\174\13\6\1\175\7\6\11\0\2\6\4\0"+
    "\12\6\1\176\20\6\11\0\2\6\4\0\20\6\1\177"+
    "\3\6\1\200\6\6\11\0\2\6\4\0\24\6\1\201"+
    "\6\6\11\0\2\6\4\0\16\6\1\202\14\6\11\0"+
    "\2\6\4\0\11\6\1\203\21\6\11\0\2\6\4\0"+
    "\14\6\1\204\16\6\11\0\2\6\4\0\1\6\1\205"+
    "\31\6\11\0\2\6\4\0\15\6\1\206\15\6\11\0"+
    "\2\6\4\0\1\207\32\6\11\0\2\6\4\0\1\210"+
    "\32\6\11\0\2\6\4\0\14\6\1\211\5\6\1\212"+
    "\3\6\1\213\4\6\11\0\2\6\4\0\12\6\1\214"+
    "\20\6\11\0\2\6\4\0\11\6\1\215\21\6\11\0"+
    "\2\6\4\0\14\6\1\216\16\6\11\0\2\6\4\0"+
    "\5\6\1\217\25\6\11\0\2\6\4\0\2\6\1\220"+
    "\30\6\11\0\2\6\4\0\11\6\1\221\21\6\7\125"+
    "\1\0\42\125\2\0\1\131\47\0\5\132\1\222\50\132"+
    "\1\223\1\222\44\132\11\0\2\6\4\0\3\6\1\224"+
    "\27\6\11\0\2\6\4\0\10\6\1\225\22\6\11\0"+
    "\2\6\4\0\4\6\1\226\26\6\11\0\2\6\4\0"+
    "\11\6\1\227\21\6\11\0\2\6\4\0\17\6\1\230"+
    "\13\6\11\0\2\6\4\0\7\6\1\231\23\6\11\0"+
    "\2\6\4\0\16\6\1\232\14\6\11\0\2\6\4\0"+
    "\23\6\1\233\7\6\11\0\2\6\4\0\16\6\1\234"+
    "\14\6\11\0\2\6\4\0\12\6\1\235\20\6\11\0"+
    "\2\6\4\0\10\6\1\236\22\6\11\0\2\6\4\0"+
    "\16\6\1\237\14\6\11\0\2\6\4\0\22\6\1\240"+
    "\10\6\11\0\2\6\4\0\7\6\1\241\23\6\11\0"+
    "\2\6\4\0\12\6\1\242\20\6\11\0\2\6\4\0"+
    "\7\6\1\243\23\6\11\0\2\6\4\0\11\6\1\244"+
    "\5\6\1\245\13\6\11\0\2\6\4\0\17\6\1\246"+
    "\13\6\11\0\2\6\4\0\10\6\1\247\22\6\11\0"+
    "\2\6\4\0\10\6\1\250\22\6\11\0\2\6\4\0"+
    "\12\6\1\251\16\6\1\252\1\6\11\0\2\6\4\0"+
    "\14\6\1\253\16\6\11\0\2\6\4\0\4\6\1\254"+
    "\26\6\11\0\2\6\4\0\11\6\1\255\21\6\11\0"+
    "\2\6\4\0\15\6\1\256\15\6\11\0\2\6\4\0"+
    "\11\6\1\257\21\6\11\0\2\6\4\0\11\6\1\260"+
    "\21\6\11\0\2\6\4\0\15\6\1\261\15\6\11\0"+
    "\2\6\4\0\4\6\1\262\26\6\11\0\2\6\4\0"+
    "\12\6\1\263\20\6\11\0\2\6\4\0\1\264\32\6"+
    "\11\0\2\6\4\0\11\6\1\265\21\6\11\0\2\6"+
    "\4\0\24\6\1\266\6\6\11\0\2\6\4\0\5\6"+
    "\1\267\25\6\11\0\2\6\4\0\10\6\1\270\22\6"+
    "\11\0\2\6\4\0\15\6\1\271\15\6\11\0\2\6"+
    "\4\0\22\6\1\272\10\6\11\0\2\6\4\0\1\6"+
    "\1\273\31\6\11\0\2\6\4\0\11\6\1\274\21\6"+
    "\11\0\2\6\4\0\12\6\1\275\7\6\1\276\10\6"+
    "\11\0\2\6\4\0\17\6\1\277\13\6\11\0\2\6"+
    "\4\0\20\6\1\300\12\6\11\0\2\6\4\0\12\6"+
    "\1\301\20\6\11\0\2\6\4\0\20\6\1\302\12\6"+
    "\11\0\2\6\4\0\1\303\32\6\11\0\2\6\4\0"+
    "\17\6\1\304\13\6\11\0\2\6\4\0\12\6\1\305"+
    "\6\6\1\306\11\6\11\0\2\6\4\0\14\6\1\307"+
    "\5\6\1\310\10\6\11\0\2\6\4\0\17\6\1\311"+
    "\13\6\11\0\2\6\4\0\10\6\1\312\22\6\11\0"+
    "\2\6\4\0\1\6\1\313\31\6\4\132\1\131\1\222"+
    "\44\132\11\0\2\6\4\0\4\6\1\314\26\6\11\0"+
    "\2\6\4\0\4\6\1\315\26\6\11\0\2\6\4\0"+
    "\11\6\1\316\21\6\11\0\2\6\4\0\14\6\1\317"+
    "\16\6\11\0\2\6\4\0\22\6\1\320\10\6\11\0"+
    "\2\6\4\0\16\6\1\321\14\6\11\0\2\6\4\0"+
    "\11\6\1\322\21\6\11\0\2\6\4\0\1\323\32\6"+
    "\11\0\2\6\4\0\11\6\1\324\21\6\11\0\2\6"+
    "\4\0\5\6\1\325\25\6\11\0\2\6\4\0\11\6"+
    "\1\326\21\6\11\0\2\6\4\0\16\6\1\327\14\6"+
    "\11\0\2\6\4\0\12\6\1\330\20\6\11\0\2\6"+
    "\4\0\11\6\1\331\21\6\11\0\2\6\4\0\6\6"+
    "\1\332\24\6\11\0\2\6\4\0\1\6\1\333\31\6"+
    "\11\0\2\6\4\0\14\6\1\334\16\6\11\0\2\6"+
    "\4\0\17\6\1\335\13\6\11\0\2\6\4\0\24\6"+
    "\1\336\6\6\11\0\2\6\4\0\14\6\1\337\16\6"+
    "\11\0\2\6\4\0\10\6\1\340\22\6\11\0\2\6"+
    "\4\0\1\6\1\341\31\6\11\0\2\6\4\0\6\6"+
    "\1\342\24\6\11\0\2\6\4\0\23\6\1\343\7\6"+
    "\11\0\2\6\4\0\1\6\1\344\31\6\11\0\2\6"+
    "\4\0\15\6\1\345\15\6\11\0\2\6\4\0\10\6"+
    "\1\346\22\6\11\0\2\6\4\0\1\6\1\347\31\6"+
    "\11\0\2\6\4\0\6\6\1\350\24\6\11\0\2\6"+
    "\4\0\10\6\1\351\22\6\11\0\2\6\4\0\10\6"+
    "\1\352\22\6\11\0\2\6\4\0\12\6\1\353\20\6"+
    "\11\0\2\6\4\0\6\6\1\354\24\6\11\0\2\6"+
    "\4\0\11\6\1\355\21\6\11\0\2\6\4\0\12\6"+
    "\1\356\20\6\11\0\2\6\4\0\1\357\32\6\11\0"+
    "\2\6\4\0\17\6\1\360\13\6\11\0\2\6\4\0"+
    "\20\6\1\361\12\6\11\0\2\6\4\0\12\6\1\362"+
    "\20\6\11\0\2\6\4\0\10\6\1\363\22\6\11\0"+
    "\2\6\4\0\6\6\1\364\24\6\11\0\2\6\4\0"+
    "\10\6\1\365\22\6\11\0\2\6\4\0\1\366\32\6"+
    "\11\0\2\6\4\0\11\6\1\367\21\6\11\0\2\6"+
    "\4\0\11\6\1\370\21\6\11\0\2\6\4\0\17\6"+
    "\1\371\13\6\11\0\2\6\4\0\12\6\1\372\20\6"+
    "\11\0\2\6\4\0\11\6\1\373\21\6\11\0\2\6"+
    "\4\0\5\6\1\374\25\6\11\0\2\6\4\0\11\6"+
    "\1\375\21\6\11\0\2\6\4\0\1\6\1\376\31\6"+
    "\11\0\2\6\4\0\24\6\1\377\6\6\11\0\2\6"+
    "\4\0\17\6\1\u0100\13\6\11\0\2\6\4\0\26\6"+
    "\1\u0101\4\6\11\0\2\6\4\0\5\6\1\u0102\25\6"+
    "\11\0\2\6\4\0\12\6\1\u0103\20\6\11\0\2\6"+
    "\4\0\5\6\1\u0104\25\6\11\0\2\6\4\0\11\6"+
    "\1\u0105\21\6\11\0\2\6\4\0\5\6\1\u0106\25\6"+
    "\11\0\2\6\4\0\5\6\1\u0107\25\6\11\0\2\6"+
    "\4\0\21\6\1\u0108\11\6\11\0\2\6\4\0\11\6"+
    "\1\u0109\21\6\11\0\2\6\4\0\11\6\1\u010a\21\6"+
    "\11\0\2\6\4\0\17\6\1\u010b\13\6\11\0\2\6"+
    "\4\0\6\6\1\u010c\24\6\11\0\2\6\4\0\17\6"+
    "\1\u010d\13\6\11\0\2\6\4\0\11\6\1\u010e\21\6"+
    "\11\0\2\6\4\0\14\6\1\u010f\16\6\11\0\2\6"+
    "\4\0\16\6\1\u0110\14\6\11\0\2\6\4\0\11\6"+
    "\1\u0111\21\6\11\0\2\6\4\0\7\6\1\u0112\23\6"+
    "\11\0\2\6\4\0\23\6\1\u0113\7\6\11\0\2\6"+
    "\4\0\14\6\1\u0114\16\6\11\0\2\6\4\0\17\6"+
    "\1\u0115\13\6\11\0\2\6\4\0\11\6\1\u0116\21\6"+
    "\11\0\2\6\4\0\12\6\1\u0117\20\6\11\0\2\6"+
    "\4\0\23\6\1\u0118\7\6\11\0\2\6\4\0\12\6"+
    "\1\u0119\20\6\11\0\2\6\4\0\1\u011a\32\6\11\0"+
    "\2\6\4\0\17\6\1\u011b\13\6\11\0\2\6\4\0"+
    "\17\6\1\u011c\1\u011d\12\6\11\0\2\6\4\0\7\6"+
    "\1\u011e\23\6\11\0\2\6\4\0\11\6\1\u011f\21\6"+
    "\11\0\2\6\4\0\17\6\1\u0120\13\6\11\0\2\6"+
    "\4\0\6\6\1\u0121\24\6\11\0\2\6\4\0\17\6"+
    "\1\u0122\13\6\11\0\2\6\4\0\5\6\1\u0123\25\6"+
    "\11\0\2\6\4\0\12\6\1\u0124\20\6\11\0\2\6"+
    "\4\0\6\6\1\u0125\24\6\11\0\2\6\4\0\1\6"+
    "\1\u0126\31\6\11\0\2\6\4\0\3\6\1\u0127\27\6"+
    "\11\0\2\6\4\0\17\6\1\u0128\13\6\11\0\2\6"+
    "\4\0\1\6\1\u0129\31\6\11\0\2\6\4\0\12\6"+
    "\1\u012a\20\6\11\0\2\6\4\0\1\u012b\32\6\11\0"+
    "\2\6\4\0\20\6\1\u012c\12\6\11\0\2\6\4\0"+
    "\11\6\1\u012d\21\6\11\0\2\6\4\0\11\6\1\u012e"+
    "\21\6\11\0\2\6\4\0\15\6\1\u012f\15\6\11\0"+
    "\2\6\4\0\11\6\1\u0130\21\6\11\0\2\6\4\0"+
    "\11\6\1\u0131\21\6\11\0\2\6\4\0\17\6\1\u0132"+
    "\13\6\11\0\2\6\4\0\1\6\1\u0133\31\6\11\0"+
    "\2\6\4\0\15\6\1\u0134\15\6\11\0\2\6\4\0"+
    "\11\6\1\u0135\21\6\11\0\2\6\4\0\1\6\1\u0136"+
    "\31\6\11\0\2\6\4\0\17\6\1\u0137\13\6\11\0"+
    "\2\6\4\0\1\u0138\3\6\1\u0139\26\6\11\0\2\6"+
    "\4\0\22\6\1\u013a\10\6\11\0\2\6\4\0\14\6"+
    "\1\u013b\16\6\11\0\2\6\4\0\10\6\1\u013c\22\6"+
    "\11\0\2\6\4\0\30\6\1\u013d\2\6\11\0\2\6"+
    "\4\0\23\6\1\u013e\7\6\11\0\2\6\4\0\11\6"+
    "\1\u013f\21\6\11\0\2\6\4\0\12\6\1\u0140\20\6"+
    "\11\0\2\6\4\0\12\6\1\u0141\20\6\11\0\2\6"+
    "\4\0\1\6\1\u0142\31\6\11\0\2\6\4\0\12\6"+
    "\1\u0143\20\6\11\0\2\6\4\0\15\6\1\u0144\15\6"+
    "\11\0\2\6\4\0\11\6\1\u0145\21\6\11\0\2\6"+
    "\4\0\24\6\1\u0146\6\6\11\0\2\6\4\0\12\6"+
    "\1\u0147\20\6\11\0\2\6\4\0\11\6\1\u0148\5\6"+
    "\1\u0149\13\6\11\0\2\6\4\0\1\6\1\u014a\31\6"+
    "\11\0\2\6\4\0\20\6\1\u014b\12\6\11\0\2\6"+
    "\4\0\15\6\1\u014c\15\6\11\0\2\6\4\0\12\6"+
    "\1\u014d\20\6\11\0\2\6\4\0\20\6\1\u014e\12\6"+
    "\11\0\2\6\4\0\1\u014f\32\6\11\0\2\6\4\0"+
    "\6\6\1\u0150\24\6\11\0\2\6\4\0\4\6\1\u0151"+
    "\26\6\11\0\2\6\4\0\6\6\1\u0152\24\6\11\0"+
    "\2\6\4\0\4\6\1\u0153\26\6\11\0\2\6\4\0"+
    "\4\6\1\u0154\26\6\11\0\2\6\4\0\14\6\1\u0155"+
    "\16\6\11\0\2\6\4\0\20\6\1\u0156\12\6\11\0"+
    "\2\6\4\0\1\6\1\u0157\31\6\11\0\2\6\4\0"+
    "\16\6\1\u0158\14\6\11\0\2\6\4\0\7\6\1\u0159"+
    "\23\6\11\0\2\6\4\0\15\6\1\u015a\15\6\11\0"+
    "\2\6\4\0\24\6\1\u015b\6\6\11\0\2\6\4\0"+
    "\11\6\1\u015c\21\6\11\0\2\6\4\0\16\6\1\u015d"+
    "\14\6\11\0\2\6\4\0\5\6\1\u015e\25\6\11\0"+
    "\2\6\4\0\1\u015f\32\6\11\0\2\6\4\0\16\6"+
    "\1\u0160\14\6\11\0\2\6\4\0\10\6\1\u0161\22\6"+
    "\11\0\2\6\4\0\2\6\1\u0162\30\6\11\0\2\6"+
    "\4\0\11\6\1\u0163\21\6\11\0\2\6\4\0\1\6"+
    "\1\u0164\31\6\11\0\2\6\4\0\12\6\1\u0165\20\6"+
    "\11\0\2\6\4\0\15\6\1\u0166\15\6\11\0\2\6"+
    "\4\0\11\6\1\u0167\21\6\11\0\2\6\4\0\1\6"+
    "\1\u0168\31\6\11\0\2\6\4\0\11\6\1\u0169\21\6"+
    "\11\0\2\6\4\0\12\6\1\u016a\20\6\11\0\2\6"+
    "\4\0\14\6\1\u016b\16\6\11\0\2\6\4\0\11\6"+
    "\1\u016c\21\6\11\0\2\6\4\0\2\6\1\u016d\30\6"+
    "\11\0\2\6\4\0\11\6\1\u016e\21\6\11\0\2\6"+
    "\4\0\11\6\1\u016f\21\6\11\0\2\6\4\0\12\6"+
    "\1\u0170\20\6\11\0\2\6\4\0\11\6\1\u0171\21\6"+
    "\11\0\2\6\4\0\16\6\1\u0172\14\6\11\0\2\6"+
    "\4\0\17\6\1\u0173\13\6\11\0\2\6\4\0\1\6"+
    "\1\u0174\31\6\11\0\2\6\4\0\24\6\1\u0175\6\6"+
    "\11\0\2\6\4\0\14\6\1\u0176\16\6\11\0\2\6"+
    "\4\0\12\6\1\u0177\20\6\11\0\2\6\4\0\11\6"+
    "\1\u0178\21\6\11\0\2\6\4\0\12\6\1\u0179\20\6"+
    "\11\0\2\6\4\0\13\6\1\u017a\17\6\11\0\2\6"+
    "\4\0\6\6\1\u017b\24\6\11\0\2\6\4\0\6\6"+
    "\1\u017c\24\6\11\0\2\6\4\0\16\6\1\u017d\14\6"+
    "\11\0\2\6\4\0\17\6\1\u017e\13\6\11\0\2\6"+
    "\4\0\1\6\1\u017f\31\6\11\0\2\6\4\0\17\6"+
    "\1\u0180\13\6\11\0\2\6\4\0\17\6\1\u0181\13\6"+
    "\11\0\2\6\4\0\1\6\1\u0182\31\6\11\0\2\6"+
    "\4\0\1\6\1\u0183\31\6\11\0\2\6\4\0\1\6"+
    "\1\u0184\31\6\11\0\2\6\4\0\23\6\1\u0185\7\6"+
    "\11\0\2\6\4\0\1\6\1\u0186\31\6\11\0\2\6"+
    "\4\0\25\6\1\u0187\5\6\11\0\2\6\4\0\14\6"+
    "\1\u0188\16\6\11\0\2\6\4\0\15\6\1\u0189\15\6"+
    "\11\0\2\6\4\0\17\6\1\u018a\13\6\11\0\2\6"+
    "\4\0\2\6\1\u018b\30\6\11\0\2\6\4\0\11\6"+
    "\1\u018c\21\6\11\0\2\6\4\0\23\6\1\u018d\7\6"+
    "\11\0\2\6\4\0\15\6\1\u018e\15\6\11\0\2\6"+
    "\4\0\15\6\1\u018f\15\6\11\0\2\6\4\0\15\6"+
    "\1\u0190\15\6\11\0\2\6\4\0\12\6\1\u0191\20\6"+
    "\11\0\2\6\4\0\12\6\1\u0192\20\6\11\0\2\6"+
    "\4\0\12\6\1\u0193\20\6\11\0\2\6\4\0\1\u0194"+
    "\32\6\11\0\2\6\4\0\14\6\1\u0195\16\6\11\0"+
    "\2\6\4\0\12\6\1\u0196\20\6\11\0\2\6\4\0"+
    "\1\u0197\32\6\11\0\2\6\4\0\15\6\1\u0198\15\6"+
    "\11\0\2\6\4\0\17\6\1\u0199\13\6\11\0\2\6"+
    "\4\0\1\6\1\u019a\31\6\11\0\2\6\4\0\1\6"+
    "\1\u019b\31\6\11\0\2\6\4\0\1\6\1\u019c\31\6"+
    "\11\0\2\6\4\0\14\6\1\u019d\16\6\11\0\2\6"+
    "\4\0\14\6\1\u019e\16\6\11\0\2\6\4\0\12\6"+
    "\1\u019f\20\6\11\0\2\6\4\0\12\6\1\u01a0\20\6"+
    "\11\0\2\6\4\0\1\u01a1\32\6\11\0\2\6\4\0"+
    "\7\6\1\u01a2\23\6\11\0\2\6\4\0\1\6\1\u01a3"+
    "\31\6\11\0\2\6\4\0\7\6\1\u01a4\23\6\11\0"+
    "\2\6\4\0\11\6\1\u01a5\21\6\11\0\2\6\4\0"+
    "\1\u01a6\32\6\11\0\2\6\4\0\7\6\1\u01a7\23\6"+
    "\11\0\2\6\4\0\11\6\1\u01a8\21\6\11\0\2\6"+
    "\4\0\17\6\1\u01a9\13\6\11\0\2\6\4\0\1\6"+
    "\1\u01aa\31\6\11\0\2\6\4\0\12\6\1\u01ab\20\6"+
    "\11\0\2\6\4\0\20\6\1\u01ac\12\6\11\0\2\6"+
    "\4\0\14\6\1\u01ad\16\6\11\0\2\6\4\0\11\6"+
    "\1\u01ae\21\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15036];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\3\1\4\11\30\1\2\11\2\0\56\1"+
    "\2\0\1\11\1\1\1\11\2\0\66\1\1\0\u011c\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[430];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public YangLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public YangLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return com.intellij.psi.TokenType.BAD_CHARACTER;
            }
          case 76: break;
          case 2: 
            { return com.intellij.psi.TokenType.WHITE_SPACE;
            }
          case 77: break;
          case 3: 
            { yybegin(VALUE_MODE); return YANG_IDENTIFIER;
            }
          case 78: break;
          case 4: 
            { return YANG_SEMICOLON;
            }
          case 79: break;
          case 5: 
            { return YANG_PLUS;
            }
          case 80: break;
          case 6: 
            { return YANG_LEFT_BRACE;
            }
          case 81: break;
          case 7: 
            { return YANG_RIGHT_BRACE;
            }
          case 82: break;
          case 8: 
            { return YANG_STRING_LITERAL;
            }
          case 83: break;
          case 9: 
            { yybegin(YYINITIAL); return YANG_SEMICOLON;
            }
          case 84: break;
          case 10: 
            { yybegin(YYINITIAL); return YANG_LEFT_BRACE;
            }
          case 85: break;
          case 11: 
            { yybegin(VALUE_MODE); return YANG_RPC_KEYWORD;
            }
          case 86: break;
          case 12: 
            { yybegin(VALUE_MODE); return YANG_BIT_KEYWORD;
            }
          case 87: break;
          case 13: 
            { yybegin(VALUE_MODE); return YANG_KEY_KEYWORD;
            }
          case 88: break;
          case 14: 
            { yybegin(VALUE_MODE); return YANG_MUST_KEYWORD;
            }
          case 89: break;
          case 15: 
            { yybegin(VALUE_MODE); return YANG_LEAF_KEYWORD;
            }
          case 90: break;
          case 16: 
            { yybegin(VALUE_MODE); return YANG_LIST_KEYWORD;
            }
          case 91: break;
          case 17: 
            { yybegin(VALUE_MODE); return YANG_USES_KEYWORD;
            }
          case 92: break;
          case 18: 
            { yybegin(VALUE_MODE); return YANG_ENUM_KEYWORD;
            }
          case 93: break;
          case 19: 
            { yybegin(VALUE_MODE); return YANG_TYPE_KEYWORD;
            }
          case 94: break;
          case 20: 
            { yybegin(VALUE_MODE); return YANG_BASE_KEYWORD;
            }
          case 95: break;
          case 21: 
            { yybegin(VALUE_MODE); return YANG_CASE_KEYWORD;
            }
          case 96: break;
          case 22: 
            { yybegin(VALUE_MODE); return YANG_PATH_KEYWORD;
            }
          case 97: break;
          case 23: 
            { yybegin(VALUE_MODE); return YANG_WHEN_KEYWORD;
            }
          case 98: break;
          case 24: 
            { yybegin(VALUE_MODE); return YANG_RANGE_KEYWORD;
            }
          case 99: break;
          case 25: 
            { yybegin(VALUE_MODE); return YANG_UNITS_KEYWORD;
            }
          case 100: break;
          case 26: 
            { yybegin(VALUE_MODE); return YANG_INPUT_KEYWORD;
            }
          case 101: break;
          case 27: 
            { yybegin(VALUE_MODE); return YANG_VALUE_KEYWORD;
            }
          case 102: break;
          case 28: 
            { yybegin(VALUE_MODE); return YANG_ANYXML_KEYWORD;
            }
          case 103: break;
          case 29: 
            { yybegin(VALUE_MODE); return YANG_MODULE_KEYWORD;
            }
          case 104: break;
          case 30: 
            { yybegin(VALUE_MODE); return YANG_LENGTH_KEYWORD;
            }
          case 105: break;
          case 31: 
            { yybegin(VALUE_MODE); return YANG_REFINE_KEYWORD;
            }
          case 106: break;
          case 32: 
            { yybegin(VALUE_MODE); return YANG_UNIQUE_KEYWORD;
            }
          case 107: break;
          case 33: 
            { yybegin(VALUE_MODE); return YANG_STATUS_KEYWORD;
            }
          case 108: break;
          case 34: 
            { yybegin(VALUE_MODE); return YANG_OUTPUT_KEYWORD;
            }
          case 109: break;
          case 35: 
            { yybegin(VALUE_MODE); return YANG_IMPORT_KEYWORD;
            }
          case 110: break;
          case 36: 
            { yybegin(VALUE_MODE); return YANG_CONFIG_KEYWORD;
            }
          case 111: break;
          case 37: 
            { yybegin(VALUE_MODE); return YANG_CHOICE_KEYWORD;
            }
          case 112: break;
          case 38: 
            { yybegin(VALUE_MODE); return YANG_PREFIX_KEYWORD;
            }
          case 113: break;
          case 39: 
            { yybegin(VALUE_MODE); return YANG_AUGMENT_KEYWORD;
            }
          case 114: break;
          case 40: 
            { yybegin(VALUE_MODE); return YANG_TYPEDEF_KEYWORD;
            }
          case 115: break;
          case 41: 
            { yybegin(VALUE_MODE); return YANG_INCLUDE_KEYWORD;
            }
          case 116: break;
          case 42: 
            { yybegin(VALUE_MODE); return YANG_CONTACT_KEYWORD;
            }
          case 117: break;
          case 43: 
            { yybegin(VALUE_MODE); return YANG_FEATURE_KEYWORD;
            }
          case 118: break;
          case 44: 
            { yybegin(VALUE_MODE); return YANG_DEFAULT_KEYWORD;
            }
          case 119: break;
          case 45: 
            { yybegin(VALUE_MODE); return YANG_DEVIATE_KEYWORD;
            }
          case 120: break;
          case 46: 
            { yybegin(VALUE_MODE); return YANG_PATTERN_KEYWORD;
            }
          case 121: break;
          case 47: 
            { yybegin(VALUE_MODE); return YANG_ARGUMENT_KEYWORD;
            }
          case 122: break;
          case 48: 
            { yybegin(VALUE_MODE); return YANG_REVISION_KEYWORD;
            }
          case 123: break;
          case 49: 
            { yybegin(VALUE_MODE); return YANG_GROUPING_KEYWORD;
            }
          case 124: break;
          case 50: 
            { yybegin(VALUE_MODE); return YANG_IDENTITY_KEYWORD;
            }
          case 125: break;
          case 51: 
            { yybegin(VALUE_MODE); return YANG_PRESENCE_KEYWORD;
            }
          case 126: break;
          case 52: 
            { yybegin(VALUE_MODE); return YANG_POSITION_KEYWORD;
            }
          case 127: break;
          case 53: 
            { yybegin(VALUE_MODE); return YANG_NAMESPACE_KEYWORD;
            }
          case 128: break;
          case 54: 
            { yybegin(VALUE_MODE); return YANG_MANDATORY_KEYWORD;
            }
          case 129: break;
          case 55: 
            { yybegin(VALUE_MODE); return YANG_LEAF_LIST_KEYWORD;
            }
          case 130: break;
          case 56: 
            { yybegin(VALUE_MODE); return YANG_REFERENCE_KEYWORD;
            }
          case 131: break;
          case 57: 
            { yybegin(VALUE_MODE); return YANG_EXTENSION_KEYWORD;
            }
          case 132: break;
          case 58: 
            { yybegin(VALUE_MODE); return YANG_SUBMODULE_KEYWORD;
            }
          case 133: break;
          case 59: 
            { yybegin(VALUE_MODE); return YANG_CONTAINER_KEYWORD;
            }
          case 134: break;
          case 60: 
            { yybegin(VALUE_MODE); return YANG_DEVIATION_KEYWORD;
            }
          case 135: break;
          case 61: 
            { yybegin(VALUE_MODE); return YANG_BELONGS_TO_KEYWORD;
            }
          case 136: break;
          case 62: 
            { yybegin(VALUE_MODE); return YANG_ORDERED_BY_KEYWORD;
            }
          case 137: break;
          case 63: 
            { yybegin(VALUE_MODE); return YANG_IF_FEATURE_KEYWORD;
            }
          case 138: break;
          case 64: 
            { yybegin(VALUE_MODE); return YANG_YIN_ELEMENT_KEYWORD;
            }
          case 139: break;
          case 65: 
            { yybegin(VALUE_MODE); return YANG_DESCRIPTION_KEYWORD;
            }
          case 140: break;
          case 66: 
            { yybegin(VALUE_MODE); return YANG_NOTIFICATION_KEYWORD;
            }
          case 141: break;
          case 67: 
            { yybegin(VALUE_MODE); return YANG_YANG_VERSION_KEYWORD;
            }
          case 142: break;
          case 68: 
            { yybegin(VALUE_MODE); return YANG_MAX_ELEMENTS_KEYWORD;
            }
          case 143: break;
          case 69: 
            { yybegin(VALUE_MODE); return YANG_MIN_ELEMENTS_KEYWORD;
            }
          case 144: break;
          case 70: 
            { yybegin(VALUE_MODE); return YANG_ORGANIZATION_KEYWORD;
            }
          case 145: break;
          case 71: 
            { yybegin(VALUE_MODE); return YANG_REVISION_DATE_KEYWORD;
            }
          case 146: break;
          case 72: 
            { yybegin(VALUE_MODE); return YANG_ERROR_APP_TAG_KEYWORD;
            }
          case 147: break;
          case 73: 
            { yybegin(VALUE_MODE); return YANG_ERROR_MESSAGE_KEYWORD;
            }
          case 148: break;
          case 74: 
            { yybegin(VALUE_MODE); return YANG_FRACTION_DIGITS_KEYWORD;
            }
          case 149: break;
          case 75: 
            { yybegin(VALUE_MODE); return YANG_REQUIRE_INSTANCE_KEYWORD;
            }
          case 150: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
